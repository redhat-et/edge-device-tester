apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-image-disk
  namespace: edt
spec:
  workspaces:
  - name: secrets
  - name: workspace
  - name: aws-creds

  params:
  - name: diskimage
    type: string
    description: 'URL of the installer image'
  - name: s3-bucket
    description: 'S3 bucket to upload to'
    type: string
  - name: s3-prefix
    description: 'prefix (path) for S3 keys to use'
    type: string
  - name: s3-acl
    description: 'ACL for uploaded objects'
    type: string
    default: 'private'
  - name: verbose
    description: 'log the commands used during execution'
    type: string
    default: 'true'
  - name: variant
    description: 'main, o3s or pods'
    type: string
    default: 'main'

  tasks:
  - name: deploy-golden-image
    params:
      - name: name
        value: $(context.pipelineRun.name)
      - name: namespace
        value: $(context.pipelineRun.namespace)
      - name: cores
        value: '4'
      - name: memory
        value: '4Gi'
      - name: diskimage
        value: $(params.diskimage)
      - name: storagesize
        value: '10Gi'
      - name: storageclass
        value: gp2
      - name: verbose
        value: 'false'
    taskRef:
      kind: Task
      name: kubevirt-deploy-golden-image
    workspaces:
    - name: secrets
      workspace: secrets

  - name: extract-image-disk
    params:
      - name: name
        value: $(context.pipelineRun.name)
      - name: verbose
        value: $(params.verbose)
      - name: variant
        value: $(params.variant)
    taskRef:
      kind: Task
      name: extract-image-disk
    workspaces:
    - name: output
      workspace: workspace
    runAfter:
    - deploy-golden-image

  - name: s3-image-disk
    params:
      - name: verbose
        value: $(params.verbose)
      - name: variant
        value: $(params.variant)
      - name: s3-bucket
        value: $(params.s3-bucket)
      - name: s3-prefix
        value: $(params.s3-prefix)
      - name: s3-acl
        value: $(params.s3-acl)
    taskRef:
      kind: Task
      name: s3-image-disk
    workspaces:
    - name: aws-creds
      workspace: aws-creds
    - name: output
      workspace: workspace
    runAfter:
    - extract-image-disk

  - name: clean-image-disk
    params:
      - name: name
        value: $(context.pipelineRun.name)
      - name: verbose
        value: $(params.verbose)
      - name: variant
        value: $(params.variant)
    taskRef:
      kind: Task
      name: clean-image-disk
    workspaces:
    - name: output
      workspace: workspace
    runAfter:
    - s3-image-disk
