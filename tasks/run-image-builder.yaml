apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-image-builder
  namespace: edt
spec:
  description: >-
    This task runs image builder inside the specified VM.

  params:
  - name: ip
    description: 'IP address of builder VM'
    type: string
  - name: user
    description: 'user to SSH into the VM as'
    type: string
    default: 'redhat'
  - name: verbose
    description: 'log the commands used during execution'
    type: string
    default: 'false'
  - name: variant
    description: 'main, o3s or pods'

  results:
    - name: baseos-name
      description: baseos shortname (e.g. "fiot")
    - name: baseos-release
      description: baseos release (e.g. "33")
    - name: variant
      description: variant layered onto baseos (e.g. "main")
    - name: buildid
      description: buildid of the current build (e.g. "20210101.0")

  steps:
  - name: prepare
    image: 'nettools:latest'
    script: |
      #!/usr/bin/env bash

      set -eu -o pipefail

      if [[ "$(params.verbose)" == "true" ]] ; then
        set -x
      fi

      SSH_OPTIONS='-i /tekton/home/ssh-key-pair/ssh-privatekey -o StrictHostKeyChecking=no'
      ssh_cmd="ssh ${SSH_OPTIONS} $(params.user)@$(params.ip)"

      BASEOS_NAME="fiot"
      BASEOS_REL="33"

      # use the name of the branch as variant name
      variant=$(cd $(workspaces.output.path) && git name-rev --name-only --exclude="tags*" HEAD)
      variant=${variant%~*}
      variant=${variant##*/}

      # generate a buildid
      build_timestamp=$(date -u +%Y%m%d)
      last_buildid=$( ${ssh_cmd} "(cd builds; ls -d ${build_timestamp}* 2>/dev/null)" | sort -V | tail -n 1 ) || true

      if [ "$last_buildid" != "" ]; then
        dailyid=${last_buildid#*.}
        dailyid=$((dailyid+1))
        buildid="${build_timestamp}.${dailyid}"
      else
        buildid="${build_timestamp}.0"
      fi

      # Create build folder on builder VM.
      ${ssh_cmd} mkdir builds/${buildid}

      echo -n "${BASEOS_NAME}" | tee $(results.baseos-name.path)
      echo -n "${BASEOS_REL}" | tee $(results.baseos-release.path)
      echo -n "${variant}" | tee $(results.variant.path)
      echo -n "${buildid}" | tee $(results.buildid.path)
  - name: image-builder-compose
    image: 'nettools:latest'
    script: |
        #!/usr/bin/env bash

        set -eu -o pipefail

        if [[ "$(params.verbose)" == "true" ]] ; then
          set -x
        fi

        echo "The variant is $(params.variant)"

        SSH_OPTIONS='-i /tekton/home/ssh-key-pair/ssh-privatekey -o StrictHostKeyChecking=no'

        scp ${SSH_OPTIONS} $(workspaces.output.path)/fiot.toml $(params.user)@$(params.ip):~/fiot.toml
        scp ${SSH_OPTIONS} $(workspaces.output.path)/fiot.ks  $(params.user)@$(params.ip):~/latest-build/
        
        ssh -T ${SSH_OPTIONS} $(params.user)@$(params.ip) << 'EOF'

        #Push TOML file to osbuild-composer database

        sudo composer-cli blueprints push ~/fiot.toml

        # Start image building echo "Starting image build..."

        COMPOSEID=$(sudo composer-cli compose start fiot-$(params.variant) fedora-iot-commit | awk '{print $2}')
        STATUS=$(sudo composer-cli compose status | grep $COMPOSEID | awk '{print $2}')

        while [ $STATUS !=  FINISHED ]; do sleep 60; STATUS=$(sudo composer-cli compose status | grep $COMPOSEID | awk '{print $2}'); echo $STATUS; done

        echo $COMPOSEID > ~/latest-build/uuid.txt
        echo "Build has finished..."

        sudo composer-cli compose image $COMPOSEID
        mv $COMPOSEID-commit.tar ~/latest-build/
        tar -xvf ~/latest-build/$COMPOSEID-commit.tar -C ~/latest-build/ 
        rm -f ~/latest-build/$COMPOSEID-commit.tar
        EOF
    workingDir: $(workspaces.output.path)
  workspaces:
  - name: output
    description: workspace containing the build recipe
  - name: secrets
    mountPath: /tekton/home/ssh-key-pair
    description: Secret volume containing SSH key pair for VM
